import { useEffect, useState } from "react";
import WeatherCard from "./WeatherCard";
import axios from "axios";
import CouldVideo from "../../assets/173330-849202512_tiny.mp4";
import RainVideo from "../../assets/174773-852018365_tiny.mp4";
import SummerVideo from "../../assets/15922-267503898_tiny.mp4";
const TemperatureCard = () => {
  const [weatherData, setWeatherData] = useState(null);
  const [hour, setHour] = useState([]);
  const [loading, setLoading] = useState(false);

  const getDay = (key) => {
    const date = new Date();

    if (key === "day") {
      return date.toLocaleDateString(undefined, { weekday: "long" });
    } else if (key === "date") {
      return date.toLocaleDateString("en-GB", {
        day: "numeric",
        month: "long",
      });
    }

    return;
  };

  useEffect(() => {
    const fetchWeatherData = async () => {
      setLoading(true);
      try {
        navigator.geolocation.getCurrentPosition(
          async (position) => {
            const { latitude, longitude } = position.coords;
            const apiKey = "8611baa95180437492f54121230505";

            const response = await axios.get(
              `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${latitude},${longitude}`
            );
            setWeatherData(response.data);
            setHour(response.data.forecast.forecastday[0].hour);
          },
          (error) => {
            console.error("Geolocation error:", error.message);
            // alert("Location access is required to fetch weather data.");
          }
        );
      } catch (e) {
        console.error("Error fetching weather data:", e.message);
      } finally {
        setLoading(false);
      }
    };

    fetchWeatherData();
  }, []);

  const [weatherCondition, setWeatherCondition] = useState("Rainy");
  return (
    <div className="relative rounded-xl cardShadow w-full h-full transition-all duration-500 ease-in-out ">
      {/* <div className={`rounded-xl cardShadow p-5 w-full h-full transition-all duration-500 ease-in-out ${weatherCondition === 'Sunny' ? 'bg-yellow-100 shadow-yellow-300'
            : weatherCondition === 'Rainy' ? 'bg-blue-100 shadow-blue-300'
                : weatherCondition === 'Cloudy' ? 'bg-gray-100 shadow-gray-300'
                    : 'bg-white shadow-md'}
`}> */}

      <video
        src={
          weatherCondition === "Rainy"
            ? RainVideo
            : weatherCondition === "Cloudy"
            ? CouldVideo
            : weatherCondition === "Sunny"
            ? SummerVideo
            : ""
        }
        autoPlay
        loop
        muted
        playsInline
        className="w-full h-full object-cover  top-0 left-0 absolute rounded-xl"
      />

      <div className="absolute top-0 left-0 h-full w-full p-5 bg-black/30 rounded-xl ">
        <h3 className="text-md font-semibold  !text-white">
          Temperature Guide
        </h3>
        <div className="flex flex-col justify-between h-full py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2 ">
              <Cloud />
              <span className="text-7xl font-semibold  !text-white ">
                {weatherData?.current?.temp_c}Â°
              </span>
            </div>
            <div className="text-right">
              <div className="text-md font-semibold !text-white ">
                {getDay("day")}
              </div>
              <div className="text-sm !text-white ">
                {getDay("date")}, {weatherData?.location?.name}
              </div>
              <div className="text-sm !text-white ">
                {weatherData?.location?.country}
              </div>
            </div>
          </div>

          <div className="flex justify-between text-sm text-gray-600">
            {/* {hourlyData.map((h, i) => (
                        <div key={i} className="text-center">
                            <div>ðŸŒž</div>
                            <div className="text-xs">{h.time}</div>
                            <div className="font-semibold text-lg text-gray-700">{h.temp}Â°</div>
                        </div>
                    ))} */}
            {hour.slice(0, 5).map((item, i) => {
              const time = new Date(item.time).toLocaleTimeString([], {
                hour: "2-digit",
                minute: "2-digit",
                hour12: true,
              });
              return (
                <div key={i}>
                  <WeatherCard
                    temp={item.temp_c}
                    time={time}
                    text={item.condition.text}
                  />
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TemperatureCard;

const Cloud = () => {
  return (
    <svg
      width="68"
      height="67"
      viewBox="0 0 68 67"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M0 39.8445C0 43.1727 1.16018 46.0282 3.48053 48.4111C5.80089 50.7939 8.63297 52.0713 11.9768 52.2432C12.258 52.2432 12.3987 52.1025 12.3987 51.8213V48.4697C12.3987 48.1728 12.258 48.0243 11.9768 48.0243C9.85175 47.915 8.04702 47.0673 6.56262 45.4813C5.07822 43.8954 4.33602 42.0164 4.33602 39.8445C4.33602 37.7507 5.03525 35.946 6.43371 34.4303C7.83218 32.9147 9.58612 32.0319 11.6955 31.7818L12.9377 31.6881C13.2659 31.6881 13.4299 31.5397 13.4299 31.2428L13.5706 29.9068C13.8362 27.2036 14.9807 24.9419 17.0042 23.1215C19.0277 21.3012 21.4145 20.391 24.1645 20.391C26.8989 20.391 29.2818 21.3012 31.3131 23.1215C33.3444 24.9419 34.485 27.2036 34.735 29.9068L34.9225 31.3365C34.9225 31.6334 35.071 31.7818 35.3678 31.7818H39.5398C41.7273 31.7818 43.618 32.5787 45.2118 34.1725C46.8056 35.7663 47.6024 37.657 47.6024 39.8445C47.6024 41.9695 46.8563 43.8211 45.3641 45.3993C43.8719 46.9774 42.0711 47.8525 39.9617 48.0243C39.6804 48.0243 39.5398 48.1728 39.5398 48.4697V51.8213C39.5398 52.1025 39.6804 52.2432 39.9617 52.2432C42.1492 52.1807 44.1493 51.583 45.9618 50.4502C47.7743 49.3173 49.2001 47.8173 50.2392 45.9501C51.2783 44.0829 51.7978 42.0477 51.7978 39.8445C51.7978 38.0632 51.4541 36.4304 50.7666 34.946C52.6572 32.6022 53.6026 29.8678 53.6026 26.7427C53.6026 24.9614 53.2588 23.2622 52.5713 21.6449C51.8838 20.0277 50.9541 18.6332 49.7822 17.4613C48.6103 16.2894 47.2157 15.3597 45.5985 14.6722C43.9813 13.9846 42.282 13.6409 40.5008 13.6409C36.7351 13.6409 33.5631 15.0237 30.985 17.7894C29.0005 16.7269 26.7271 16.1956 24.1645 16.1956C20.6332 16.1956 17.512 17.2855 14.8011 19.4652C12.0901 21.6449 10.3674 24.438 9.63299 27.8443C6.82044 28.4849 4.5118 29.9224 2.70708 32.1569C0.902361 34.3913 0 36.9538 0 39.8445ZM13.5471 56.5792C13.5471 57.0323 13.6799 57.4776 13.9456 57.9151C14.2112 58.3527 14.5862 58.6495 15.0706 58.8058C15.555 58.9777 16.0667 58.9269 16.6058 58.6534C17.1448 58.38 17.5081 57.923 17.6956 57.2823L18.3285 54.6573C18.5003 54.1416 18.4417 53.6221 18.1527 53.0987C17.8636 52.5752 17.4378 52.2275 16.8753 52.0557C16.2503 51.8994 15.6878 51.9697 15.1878 52.2666C14.6878 52.5635 14.3831 53.0088 14.2737 53.6026L13.5706 56.087C13.5549 56.1964 13.5471 56.3604 13.5471 56.5792ZM16.805 44.7899C16.805 45.743 17.3363 46.3993 18.3988 46.7587C18.9457 46.9462 19.4769 46.9032 19.9926 46.6298C20.5082 46.3563 20.8519 45.9149 21.0238 45.3055L21.6332 42.7274C21.8051 42.2117 21.7504 41.6961 21.4691 41.1805C21.1879 40.6648 20.766 40.3133 20.2035 40.1258C19.5941 39.9695 19.0394 40.0359 18.5394 40.325C18.0394 40.614 17.7347 41.0476 17.6253 41.6258L16.8753 44.1805C16.8284 44.3836 16.805 44.5868 16.805 44.7899ZM19.8519 64.5012C19.8519 64.9075 19.9926 65.3215 20.2738 65.7434C20.5551 66.1653 20.9613 66.4622 21.4926 66.6341C21.5082 66.6341 21.5902 66.6458 21.7387 66.6692C21.8871 66.6927 22.0082 66.7044 22.102 66.7044C22.4457 66.7044 22.7504 66.6419 23.0161 66.5169C23.4848 66.3137 23.8286 65.8294 24.0473 65.0637L24.727 62.5793C24.8989 62.0012 24.8403 61.4582 24.5512 60.9504C24.2622 60.4425 23.8364 60.1105 23.2739 59.9543C22.6957 59.7824 22.1528 59.841 21.6449 60.13C21.1371 60.4191 20.8051 60.8449 20.6488 61.4074L19.9457 63.9621C19.8832 64.2121 19.8519 64.3918 19.8519 64.5012ZM21.0004 9.3283C21.0004 9.95332 21.2113 10.469 21.6332 10.8752L23.2739 12.4924C24.1176 13.3362 25.0942 13.3362 26.2036 12.4924C26.6099 12.0549 26.813 11.5471 26.813 10.969C26.813 10.3908 26.6099 9.883 26.2036 9.4455L24.6333 7.80484C24.227 7.39858 23.727 7.19545 23.1332 7.19545C22.5551 7.19545 22.0551 7.40249 21.6332 7.81656C21.2113 8.23063 21.0004 8.73454 21.0004 9.3283ZM23.227 52.5244C23.227 52.9463 23.3598 53.3682 23.6254 53.7901C23.8911 54.212 24.2817 54.501 24.7973 54.6573C25.3755 54.8292 25.9067 54.7901 26.3911 54.5401C26.8755 54.2901 27.2114 53.8213 27.3989 53.1338L28.0083 50.6025C28.1802 50.0244 28.1294 49.4814 27.856 48.9736C27.5825 48.4658 27.1646 48.1259 26.6021 47.954C25.977 47.7821 25.4106 47.8486 24.9028 48.1532C24.395 48.4579 24.0864 48.8994 23.977 49.4775L23.2739 52.0557C23.2426 52.1494 23.227 52.3057 23.227 52.5244ZM30.1881 56.837C30.2506 57.7745 30.774 58.462 31.7584 58.8995L32.3912 58.9933C32.7975 58.9933 33.192 58.8605 33.5748 58.5948C33.9577 58.3292 34.2272 57.9151 34.3835 57.3526L35.11 54.8213C35.2663 54.2276 35.1921 53.6768 34.8874 53.169C34.5827 52.6611 34.1413 52.3525 33.5631 52.2432C33.0475 52.0713 32.5319 52.1299 32.0162 52.419C31.5006 52.708 31.1568 53.1338 30.985 53.6963L30.3053 56.2511C30.2896 56.3136 30.274 56.3839 30.2584 56.462C30.2428 56.5401 30.2271 56.6065 30.2115 56.6612C30.1959 56.7159 30.1881 56.7745 30.1881 56.837ZM33.6803 44.9305C33.6803 45.3368 33.8092 45.7391 34.067 46.1376C34.3249 46.536 34.7038 46.8056 35.2038 46.9462L35.8366 47.0165C36.321 47.0165 36.7507 46.8681 37.1257 46.5712C37.5007 46.2743 37.7351 45.8837 37.8288 45.3993L38.5085 42.9149C38.6804 42.3211 38.6257 41.7781 38.3445 41.2859C38.0632 40.7937 37.6413 40.4695 37.0788 40.3133C36.5007 40.1414 35.9655 40.1922 35.4733 40.4656C34.9811 40.739 34.6569 41.157 34.5006 41.7195L33.7506 44.368C33.7038 44.5711 33.6803 44.7587 33.6803 44.9305ZM34.5006 20.2738C36.1569 18.68 38.157 17.8832 40.5008 17.8832C42.9539 17.8832 45.0477 18.7464 46.7821 20.473C48.5165 22.1996 49.3837 24.2895 49.3837 26.7427C49.3837 28.149 48.9931 29.6177 48.2118 31.149C45.8212 28.7584 42.9305 27.563 39.5398 27.563H38.696C38.0241 24.7348 36.6257 22.3051 34.5006 20.2738ZM38.3679 7.19545C38.3679 7.82047 38.5671 8.33219 38.9656 8.73064C39.364 9.12908 39.8757 9.3283 40.5008 9.3283C41.1258 9.3283 41.6375 9.12908 42.0359 8.73064C42.4344 8.33219 42.6336 7.82047 42.6336 7.19545V2.1563C42.6336 1.53128 42.4344 1.01565 42.0359 0.60939C41.6375 0.203133 41.1258 7.62939e-06 40.5008 7.62939e-06C39.8757 7.62939e-06 39.364 0.203133 38.9656 0.60939C38.5671 1.01565 38.3679 1.53128 38.3679 2.1563V7.19545ZM52.2432 12.9377C52.2432 13.5628 52.4307 14.0706 52.8057 14.4612C53.3213 14.8831 53.8369 15.094 54.3526 15.094C54.8213 15.094 55.3135 14.8831 55.8292 14.4612L59.4152 10.8752C59.8214 10.4221 60.0246 9.89863 60.0246 9.30487C60.0246 8.71111 59.8214 8.2111 59.4152 7.80484C59.0089 7.39858 58.5167 7.19545 57.9386 7.19545C57.3604 7.19545 56.8526 7.39858 56.4151 7.80484L52.8057 11.3908C52.4307 11.8284 52.2432 12.344 52.2432 12.9377ZM54.8448 41.0281C54.8448 41.0281 54.7393 41.1316 54.5284 41.3387C54.3174 41.5457 54.2119 41.9383 54.2119 42.5164C54.2119 43.0946 54.4307 43.618 54.8682 44.0868L56.4151 45.6805C56.9307 46.1962 57.4464 46.454 57.962 46.454C58.4464 46.454 58.9308 46.1962 59.4152 45.6805C59.8683 45.2274 60.0871 44.7157 60.0714 44.1454C60.0558 43.575 59.8371 43.0789 59.4152 42.6571L57.798 41.0164C57.3917 40.6101 56.9151 40.407 56.3682 40.407C55.7745 40.407 55.2667 40.614 54.8448 41.0281ZM57.8917 26.7427C57.8917 27.3052 58.0948 27.7896 58.5011 28.1958C58.9073 28.6021 59.3917 28.8052 59.9542 28.8052H65.0637C65.7043 28.8052 66.2278 28.6099 66.634 28.2193C67.0403 27.8287 67.2434 27.3365 67.2434 26.7427C67.2434 26.1177 67.0364 25.602 66.6223 25.1958C66.2083 24.7895 65.6887 24.5864 65.0637 24.5864H59.9542C59.3761 24.5864 58.8878 24.7973 58.4894 25.2192C58.0909 25.6411 57.8917 26.1489 57.8917 26.7427Z"
        fill="#fff"
      />
    </svg>
  );
};
